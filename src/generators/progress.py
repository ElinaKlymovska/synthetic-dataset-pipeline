"""
–¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—É –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω—å.
"""

import time
from typing import Dict, Any, List, Callable
from ..core import GenerationResult


class ProgressTracker:
    """–¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω—å."""
    
    def __init__(self):
        self.total: int = 0
        self.completed: int = 0
        self.successful: int = 0
        self.failed: int = 0
        self.start_time: float = 0
        self.results: List[GenerationResult] = []
        self.callbacks: List[Callable] = []
    
    def start(self, total: int):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ç—Ä–µ–∫–µ—Ä –∑ –∑–∞–≥–∞–ª—å–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑–∞–≤–¥–∞–Ω—å."""
        self.total = total
        self.completed = 0
        self.successful = 0
        self.failed = 0
        self.start_time = time.time()
        self.results = []
        
        print(f"üöÄ –†–æ–∑–ø–æ—á–∞—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é {total} –∑–æ–±—Ä–∞–∂–µ–Ω—å...")
    
    def update(self, result: GenerationResult):
        """–û–Ω–æ–≤–ª—é—î –ø—Ä–æ–≥—Ä–µ—Å –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó."""
        self.completed += 1
        self.results.append(result)
        
        if result.success:
            self.successful += 1
            print(f"‚úÖ {self.completed}/{self.total} - –£—Å–ø—ñ—à–Ω–æ: {result.image_path}")
        else:
            self.failed += 1
            print(f"‚ùå {self.completed}/{self.total} - –ü–æ–º–∏–ª–∫–∞: {result.error_message}")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
        progress_percent = (self.completed / self.total) * 100
        elapsed = time.time() - self.start_time
        
        if self.completed < self.total:
            # –û—Ü—ñ–Ω—é—î–º–æ —á–∞—Å –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            avg_time_per_item = elapsed / self.completed
            remaining_time = avg_time_per_item * (self.total - self.completed)
            print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å: {progress_percent:.1f}% | ETA: {remaining_time:.0f}—Å")
        
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ callbacks
        for callback in self.callbacks:
            callback(self)
    
    def add_callback(self, callback: Callable):
        """–î–æ–¥–∞—î callback –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—å –ø—Ä–æ–≥—Ä–µ—Å—É."""
        self.callbacks.append(callback)
    
    def get_progress_info(self) -> Dict[str, Any]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–æ–≥—Ä–µ—Å."""
        elapsed_time = time.time() - self.start_time if self.start_time > 0 else 0
        
        progress_info = {
            "total": self.total,
            "completed": self.completed,
            "successful": self.successful,
            "failed": self.failed,
            "progress_percent": (self.completed / self.total * 100) if self.total > 0 else 0,
            "elapsed_time_seconds": elapsed_time,
            "estimated_remaining_seconds": 0,
            "average_time_per_item": elapsed_time / max(1, self.completed),
            "success_rate": (self.successful / max(1, self.completed)) * 100,
            "is_completed": self.completed >= self.total,
            "total_cost": sum(r.cost or 0 for r in self.results if r.cost),
            "errors": [r.error_message for r in self.results if not r.success and r.error_message]
        }
        
        # –û—Ü—ñ–Ω–∫–∞ —á–∞—Å—É –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        if self.completed > 0 and self.completed < self.total:
            avg_time = elapsed_time / self.completed
            remaining_items = self.total - self.completed
            progress_info["estimated_remaining_seconds"] = avg_time * remaining_items
        
        return progress_info
    
    def __str__(self) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç—Ä–æ–∫–æ–≤–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É."""
        info = self.get_progress_info()
        
        if info["is_completed"]:
            return (f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {info['successful']}/{info['total']} —É—Å–ø—ñ—à–Ω–æ "
                   f"({info['success_rate']:.1f}%) –∑–∞ {info['elapsed_time_seconds']:.1f}—Å")
        else:
            return (f"üîÑ –ü—Ä–æ–≥—Ä–µ—Å: {info['completed']}/{info['total']} "
                   f"({info['progress_percent']:.1f}%) | "
                   f"ETA: {info['estimated_remaining_seconds']:.0f}—Å") 