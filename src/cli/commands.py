"""
CLI Commands implementation for the image generation system.
"""

import sys
import logging
from pathlib import Path
from typing import Optional
from datetime import datetime

from ..core import GenerationConfig
from ..utils import validate_image_file, log_system_info, export_dataset_json, export_dataset_csv


class Commands:
    """CLI Commands implementation."""
    
    def __init__(self):
        self.app = None
        self.logger = logging.getLogger(self.__class__.__name__)
    
    def set_app(self, app):
        """Set the application instance."""
        self.app = app
    
    def generate(self, args):
        """Handle generate command."""
        try:
            # Validate reference image
            validation = validate_image_file(args.reference)
            if not validation["valid"]:
                self.logger.error(f"‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Ç–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:")
                for error in validation["errors"]:
                    self.logger.error(f"  ‚Ä¢ {error}")
                sys.exit(1)
            
            # Show image info
            info = validation["info"]
            self.logger.info(f"üì∏ –†–µ—Ñ–µ—Ä–µ–Ω—Ç–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {args.reference}")
            self.logger.info(f"  üìê –†–æ–∑–º—ñ—Ä: {info['width']}x{info['height']}")
            self.logger.info(f"  üìÑ –§–æ—Ä–º–∞—Ç: {info['format']}")
            self.logger.info(f"  üíæ –†–æ–∑–º—ñ—Ä: {info['file_size_mb']} MB")
            
            # Estimate cost
            cost_info = self.app.estimate_cost(args.count, args.model)
            self.logger.info(f"\nüí∞ –û—Ü—ñ–Ω–∫–∞ –≤–∞—Ä—Ç–æ—Å—Ç—ñ:")
            self.logger.info(f"  üî¢ –ó–æ–±—Ä–∞–∂–µ–Ω—å: {args.count}")
            self.logger.info(f"  üíµ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: ${cost_info['total_cost']:.2f}")
            
            # Confirm generation
            if not args.no_confirm:
                confirm = input(f"\nü§î –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é {args.count} –∑–æ–±—Ä–∞–∂–µ–Ω—å? (y/N): ")
                if confirm.lower() not in ["y", "yes", "—Ç–∞–∫", "—Ç"]:
                    self.logger.info("üõë –ì–µ–Ω–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
                    return
            
            # Set up generation config
            config_overrides = {}
            if args.model:
                config_overrides["model_name"] = args.model
            if args.denoising_strength:
                config_overrides["strength"] = args.denoising_strength
            if args.guidance_scale:
                config_overrides["guidance_scale"] = args.guidance_scale
            if args.steps:
                config_overrides["steps"] = args.steps
            if args.width:
                config_overrides["width"] = args.width
            if args.height:
                config_overrides["height"] = args.height
            if args.seed:
                config_overrides["seed"] = args.seed
            
            # Generate images
            self.logger.info(f"\nüöÄ –†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é...")
            
            results = self.app.generate_character_variations(
                reference_image=args.reference,
                count=args.count,
                output_dir=args.output_dir,
                config_overrides=config_overrides
            )
            
            # Show results
            successful = len([r for r in results if r.success])
            failed = len(results) - successful
            
            self.logger.info(f"\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            self.logger.info(f"  üéØ –£—Å–ø—ñ—à–Ω–æ: {successful}/{args.count}")
            self.logger.info(f"  üí∞ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: ${sum(r.cost or 0 for r in results):.2f}")
            
            if failed > 0:
                self.logger.warning(f"‚ö†Ô∏è {failed} –∑–æ–±—Ä–∞–∂–µ–Ω—å –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏")
                
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: {e}")
            sys.exit(1)
    
    def estimate(self, args):
        """Handle estimate command."""
        try:
            cost_info = self.app.estimate_cost(args.count, args.model)
            
            self.logger.info("üí∞ –û—Ü—ñ–Ω–∫–∞ –≤–∞—Ä—Ç–æ—Å—Ç—ñ:")
            self.logger.info(f"  üî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å: {cost_info['count']}")
            self.logger.info(f"  ü§ñ –ú–æ–¥–µ–ª—å: {cost_info['model']}")
            self.logger.info(f"  üíµ –í–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: ${cost_info['cost_per_image']:.3f}")
            self.logger.info(f"  üí∏ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: ${cost_info['total_cost']:.2f} {cost_info['currency']}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ü—ñ–Ω–∫–∏: {e}")
            sys.exit(1)
    
    def analyze(self, args):
        """Handle analyze command."""
        if args.dataset:
            try:
                summary = self.app.get_dataset_summary()
                
                self.logger.info("üìä –ê–Ω–∞–ª—ñ–∑ –¥–∞—Ç–∞—Å–µ—Ç—É:")
                self.logger.info(f"  üìÅ –í—Å—å–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å: {summary['total_images']}")
                self.logger.info(f"  ‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö: {summary['successful_generations']}")
                self.logger.info(f"  ‚ùå –ù–µ–≤–¥–∞–ª–∏—Ö: {summary['failed_generations']}")
                self.logger.info(f"  üéØ –ü—Ä–∏–¥–∞—Ç–Ω–∏—Ö –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {summary['training_suitable']}")
                self.logger.info(f"  ‚≠ê –°–µ—Ä–µ–¥–Ω—è —è–∫—ñ—Å—Ç—å: {summary['average_quality_score']:.2f}")
                self.logger.info(f"  üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: ${summary['total_cost']:.2f}")
                
                if args.detailed:
                    self.logger.info("\nüé≠ –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –ø–æ–∑–∞—Ö:")
                    for pose, count in summary['pose_distribution'].items():
                        self.logger.info(f"  {pose}: {count}")
                    
                    self.logger.info("\nüëó –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –æ–¥—è–≥—É:")
                    for outfit, count in summary['outfit_distribution'].items():
                        self.logger.info(f"  {outfit}: {count}")
                
            except Exception as e:
                self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {e}")
                sys.exit(1)
        
        elif args.image:
            try:
                validation = validate_image_file(args.image)
                
                self.logger.info(f"üîç –ê–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {args.image}")
                self.logger.info(f"  ‚úÖ –í–∞–ª—ñ–¥–Ω–µ: {'–¢–∞–∫' if validation['valid'] else '–ù—ñ'}")
                
                info = validation['info']
                self.logger.info(f"  üìê –†–æ–∑–º—ñ—Ä: {info['width']}x{info['height']}")
                self.logger.info(f"  üìÑ –§–æ—Ä–º–∞—Ç: {info['format']}")
                self.logger.info(f"  üíæ –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {info['file_size_mb']} MB")
                self.logger.info(f"  üìä –ú–µ–≥–∞–ø—ñ–∫—Å–µ–ª—ñ: {info['megapixels']}")
                
                if validation['errors']:
                    self.logger.warning("‚ùå –ü—Ä–æ–±–ª–µ–º–∏:")
                    for issue in validation['errors']:
                        self.logger.warning(f"  ‚Ä¢ {issue}")
                
                if validation['warnings']:
                    self.logger.warning("‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è:")
                    for warning in validation['warnings']:
                        self.logger.warning(f"  ‚Ä¢ {warning}")
                
            except Exception as e:
                self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
                sys.exit(1)
        
        else:
            self.logger.error("‚ùå –í–∫–∞–∂—ñ—Ç—å --dataset –∞–±–æ --image –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É")
            sys.exit(1)
    
    def export(self, args):
        """Handle export command."""
        try:
            if not args.output:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                args.output = f"exports/dataset_{timestamp}.{args.format}"
            
            export_path = self.app.export_dataset(args.output, args.format)
            self.logger.info(f"üì§ –î–∞–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ: {export_path}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: {e}")
            sys.exit(1)
    
    def models(self, args):
        """Handle models command."""
        try:
            if args.list:
                models = self.app.get_available_models()
                self.logger.info("ü§ñ –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ:")
                for model in models:
                    self.logger.info(f"  ‚Ä¢ {model}")
            
            elif args.info:
                model_info = self.app.get_model_info(args.info)
                if model_info:
                    self.logger.info(f"ü§ñ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–æ–¥–µ–ª—å '{args.info}':")
                    self.logger.info(f"  üìù –ù–∞–∑–≤–∞: {model_info['name']}")
                    self.logger.info(f"  üÜî ID: {model_info['model_id']}")
                    self.logger.info(f"  üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: ${model_info['cost_per_generation']:.3f}")
                    self.logger.info(f"  üì¶ –†–æ–∑–º—ñ—Ä –±–∞—Ç—á—É: {model_info['max_batch_size']}")
                else:
                    self.logger.error(f"‚ùå –ú–æ–¥–µ–ª—å '{args.info}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                    sys.exit(1)
            
            else:
                self.logger.error("‚ùå –í–∫–∞–∂—ñ—Ç—å --list –∞–±–æ --info")
                sys.exit(1)
                
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            sys.exit(1)
    
    def validate(self, args):
        """Handle validate command."""
        if args.image:
            try:
                validation = validate_image_file(args.image)
                
                if validation['valid']:
                    self.logger.info(f"‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è '{args.image}' –≤–∞–ª—ñ–¥–Ω–µ")
                else:
                    self.logger.error(f"‚ùå –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è '{args.image}' –Ω–µ–≤–∞–ª—ñ–¥–Ω–µ:")
                    for issue in validation['errors']:
                        self.logger.error(f"  ‚Ä¢ {issue}")
                    sys.exit(1)
                
            except Exception as e:
                self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {e}")
                sys.exit(1)
        
        elif args.config:
            try:
                if self.app.config.validate():
                    self.logger.info("‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤–∞–ª—ñ–¥–Ω–∞")
                else:
                    self.logger.error("‚ùå –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –Ω–µ–≤–∞–ª—ñ–¥–Ω–∞")
                    sys.exit(1)
                    
            except Exception as e:
                self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
                sys.exit(1)
        
        else:
            self.logger.error("‚ùå –í–∫–∞–∂—ñ—Ç—å --image –∞–±–æ --config")
            sys.exit(1)
    
    def env_check(self, args):
        """Handle env-check command."""
        from ..utils.system import check_system_requirements, validate_api_credentials
        
        system_check = check_system_requirements()
        api_check = validate_api_credentials()
        
        self.logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:")
        
        if system_check["meets_requirements"]:
            self.logger.info("‚úÖ –°–µ—Ä–µ–¥–æ–≤–∏—â–µ –≥–æ—Ç–æ–≤–µ –¥–æ —Ä–æ–±–æ—Ç–∏")
        else:
            self.logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º–∏ –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ–º:")
            for rec in system_check["recommendations"]:
                self.logger.error(f"  ‚Ä¢ {rec}")
        
        # API –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        if all(api_check.values()):
            self.logger.info("‚úÖ API –∫—Ä–µ–¥–µ–Ω—Ü—ñ–∞–ª–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ")
        else:
            self.logger.warning("‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ API:")
            for api, valid in api_check.items():
                status = "‚úÖ" if valid else "‚ùå"
                self.logger.warning(f"  {status} {api}")
        
        if args.detailed:
            # –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
            sys_info = log_system_info(self.logger)
            
            self.logger.info("\nüíª –î–µ—Ç–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:")
            self.logger.info(f"  –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {sys_info['platform']}")
            self.logger.info(f"  Python: {sys_info['python_version']}")
            self.logger.info(f"  CPU: {sys_info['cpu_count']} —è–¥–µ—Ä")
            self.logger.info(f"  RAM: {sys_info['available_memory_gb']:.1f}/{sys_info['memory_gb']:.1f} GB")
            self.logger.info(f"  –î–∏—Å–∫: {sys_info['disk_space_gb']:.1f} GB –≤—ñ–ª—å–Ω–æ")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥
            self.logger.info("\nüîß –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥:")
            for check_name, check_result in system_check["checks"].items():
                if isinstance(check_result, dict) and "passed" in check_result:
                    status = "‚úÖ" if check_result["passed"] else "‚ùå"
                    current = check_result.get("current", "N/A")
                    required = check_result.get("required", "N/A")
                    self.logger.info(f"  {status} {check_name}: {current} (required: {required})")
                else:
                    self.logger.info(f"  ‚ö†Ô∏è {check_name}: {check_result}") 